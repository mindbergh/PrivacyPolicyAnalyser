"""

Copyright 2015 Austin Ankney, Ming Fang, Wenjun Wang and Yao Zhou

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

This file defines the concrete control flow logic

This script is the main entry for classifier.
It does action classification and extract keywords from the incoming query.
===========================================================================

TODO(wenjunw@cs.cmu.edu):
- Reconsider the type words
- Consider action 6,7,8 in one query
- log force change of aid
- update _type_recognition function

Usage: refer to demo.py
Dependency: numpy, scipy, sklearn

Author: Wenjun Wang<wenjunw@cs.cmu.edu>
Date: July 1, 2015
"""
import pickle
import os


from liblinearutil import *
from www.settings import BASE_DIR
from ppa.classifier.feature import *


class Classifier(object):
    modeldir = os.path.abspath(BASE_DIR + "/ppa/classifier/models/")
    stopword_path = os.path.abspath(BASE_DIR + "/ppa/classifier/english.stp")

    def __init__(self):
        """
        All variables which would be used by every query classification and parsing are listed here.
        Only need to create Classifier object once, i.e. initialize once
        """
        self._model = self._get_model()
        self.stopwords = stopword(self.stopword_path)
        self.feature_list = self._get_feature_list()
        self.feature_arg = parse_options('-uni -pos2 -stem -stprm')
        self.labels = [0, 1]

    def _get_model(self):
        """Load model

        This function is called during initialization

        Return: models, action model and type model
        """
        m1 = load_model(self.modeldir + '/model')
        return m1


    def _get_feature_list(self):
        """Load feature file

        This function is called during initialization

        Return: Feature list
        """
        with open(self.modeldir + '/features', 'r') as infile:
            feature_list = pickle.load(infile)
            return feature_list

    def _convert_query_to_dictionary(self, query):
        """Convert each user query to the format required by LibLINEAR

        Args and Need:
            query: the raw query, like 'What do people think of ?'
            self.feature_list: a list of unique features generated by function feature_generator

        Return:
            Convert user's query: store information in a dictionary,
            which is a member of a list.
        """
        features = feature_generator(query, self.stopwords, self.feature_arg)
        onerow = {}
        for f in features:
            try:
                onerow[self.feature_list.index(f) + 1] = 1
            except ValueError:
                pass

        return [onerow]

    def classify(self, query):
        """Does query classification, which decides which action need to be taken

        This function is called by self.action_info

        Return: Action id
        """
        x = self._convert_query_to_dictionary(query)
        p_label, p_val = predict(self.labels, x, self._model, '-b 0')

        return int(p_label[0])